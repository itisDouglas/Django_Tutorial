from django.shortcuts import render, get_object_or_404
from django.http import HttpResponse, Http404, HttpResponseRedirect
from django.template import loader
from django.urls import reverse
from django.views import generic
from django.utils import timezone

from .models import Choice, Question

# Create your views here.
#rule for views:
#a view needs to return an HttpResponse object or raise exception like Http 404

class IndexView(generic.ListView):
    template_name = 'polls/index.html'
    context_object_name = 'latest_question_list'

    def get_queryset(self):
        """return the last five published questions(not including those set to be published in the future)"""
        #this returns queryset containing Questions whose pub_date is less than or equal to timezone.now
        return Question.objects.filter(
            pub_date__lte = timezone.now()
        ).order_by('-pub_date')[:5]

class DetailView(generic.DetailView):
    #this detailview generic view exptects the primary key value from the URL to be called 'pk'
    model = Question
    #template_name is used to tell Django to use a specific template name instead of the autogenerated default template name
    template_name = 'polls/detail.html'

    def get_queryset(self):
        """excludes any questions that aren't published yet"""
        return Question.objects.filter(pub_date__lte=timezone.now())

class ResultsView(generic.DetailView):
    model = Question
    template_name = 'polls/results.html'


def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        #request.POST is dictionary-like object that accesses submitted data by key name
        #there's also request.GET when needed for GET request
        selected_choice = question.choice_set.get(pk=request.POST['choice'])
        #KeyError raised in case request.POST['choice'] doesn't receive a 'choice' from POST data
    except (KeyError, Choice.DoesNotExist):
        #redisplay the question voting form
        return render(request, 'polls/detail.html', {'question': question,'error_message': "You didn't select a choice.",})
    else:
        selected_choice.votes += 1
        selected_choice.save()
        #always return an HttpResponseRedirect after dealing with
        #POST data
        #prevents data from being posted twice if a user hits the BAck button
        #reverse() helps avoid having to hardcode a URL in the view function
    return HttpResponseRedirect(reverse('polls:results',args = (question.id,)))



"""all of this has been commented out in order to use generic views"""


# def index(request):
#     latest_question_list = Question.objects.order_by('-pub_date')[:5]
#     #loading up the template
#     template = loader.get_template('polls/index.html')
#     #context is a dictionary mapping template variable names to Python objects
#     context = {
#         'latest_question_list': latest_question_list,
#     }
#     #render function takes request objects as first argument
#     #template name as second argument
#     #dictionary as optional third argument
#     #returns an HttpResponse object of the given template 
#     return render(request, 'polls/index.html', context)

# def detail(request, question_id):
#     #get_object_or_404() takes django model as 1st argument
#     #takes arbitrary number of keyword arguments as secon argument
#     #passes these to the get() of the model's manager
#     #raises http 404 if object doesn't exist
#     question = get_object_or_404(Question,
#     pk=question_id)
#     return render(request, 'polls/detail.html',{'question':question})

# def results(request, question_id):
#     question = get_object_or_404(Question, pk=question_id)
#     return render(request, 'polls/results.html', {'question':question})

# def vote(request, question_id):
#     question = get_object_or_404(Question, pk=question_id)
#     try:
#         #request.POST is dictionary-like object that accesses submitted data by key name
#         #there's also request.GET when needed for GET request
#         selected_choice = question.choice_set.get(pk=request.POST['choice'])
#         #KeyError raised in case request.POST['choice'] doesn't receive a 'choice' from POST data
#     except (KeyError, Choice.DoesNotExist):
#         #redisplay the question voting form
#         return render(request, 'polls/detail.html', {
#             'question': question,
#             'error_message': "You didn't select a choice.",
#         })
#     else:
#         selected_choice.votes += 1
#         selected_choice.save()
#         #always return an HttpResponseRedirect after dealing with
#         #POST data
#         #prevents data from being posted twice if a user hits the BAck button
#         #reverse() helps avoid having to hardcode a URL in the view function
#         return HttpResponseRedirect(reverse('polls:results',
#         args = (question.id,)))


